Line 1: type_specifier : INT

int

Line 1: declaration_list : ID LTHIRD CONST_INT RTHIRD

z[10]

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int z[10];

Line 1: unit : var_declaration

int z[10];

Line 1: program : unit

int z[10];

Line 2: type_specifier : FLOAT

float

Line 2: declaration_list : ID

y

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

float y;

Line 2: unit : var_declaration

float y;

Line 2: program : program unit

int z[10];
float y;

Line 4: type_specifier : INT

int

Line 4: type_specifier : INT

int

Line 4: parameter_list : type_specifier ID

int a

Line 4: type_specifier : INT

int

Line 4: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 5: variable : ID

a

Line 5: factor : variable

a

Line 5: unary_expression : factor

a

Line 5: term : unary_expression

a

Line 5: simple_expression : term

a

Line 5: variable : ID

b

Line 5: factor : variable

b

Line 5: unary_expression : factor

b

Line 5: term : unary_expression

b

Line 5: simple_expression : simple_expression ADDOP term

a+b

Line 5: rel_expression : simple_expression

a+b

Line 5: logic_expression : rel_expression

a+b

Line 5: expression : logic_expression

a+b

Line 5: statement : RETURN expression SEMICOLON

return a+b;

Line 5: statements : statement

return a+b;

Line 6: compound_statement : LCURL statements RCURL

{
return a+b;
}

ScopeTable # 1.1
 7 --> < a , ID > 
 8 --> < b , ID > 

ScopeTable # 1
 1 --> < y , ID > 
 2 --> < z , ID > 
 10 --> < helper , ID > 

Line 6: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int helper(int a,int b){
return a+b;
}

Line 6: unit : func_definition

int helper(int a,int b){
return a+b;
}

Line 6: program : program unit

int z[10];
float y;
int helper(int a,int b){
return a+b;
}

Line 8: type_specifier : INT

int

Line 8: type_specifier : INT

int

Line 8: parameter_list : type_specifier ID

int x

Line 8: type_specifier : INT

int

Line 8: parameter_list : parameter_list COMMA type_specifier ID

int x,int y

Line 8: type_specifier : INT

int

Line 8: parameter_list : parameter_list COMMA type_specifier ID

int x,int y,int z

Line 9: type_specifier : INT

int

Line 9: declaration_list : ID

w

Line 9: var_declaration : type_specifier declaration_list SEMICOLON

int w;

Line 9: statement : var_declaration

int w;

Line 9: statements : statement

int w;

Line 10: variable : ID

w

Line 10: variable : ID

x

Line 10: factor : variable

x

Line 10: unary_expression : factor

x

Line 10: term : unary_expression

x

Line 10: simple_expression : term

x

Line 10: variable : ID

y

Line 10: factor : variable

y

Line 10: unary_expression : factor

y

Line 10: term : unary_expression

y

Line 10: simple_expression : simple_expression ADDOP term

x+y

Line 10: variable : ID

z

Line 10: factor : variable

z

Line 10: unary_expression : factor

z

Line 10: term : unary_expression

z

Line 10: simple_expression : simple_expression ADDOP term

x+y+z

Line 10: rel_expression : simple_expression

x+y+z

Line 10: logic_expression : rel_expression

x+y+z

Line 10: expression : variable ASSIGNOP logic_expression

w=x+y+z

Line 10: expression_statement : expression SEMICOLON

w=x+y+z;

Line 10: statement : expression_statement

w=x+y+z;

Line 10: statements : statements statement

int w;
w=x+y+z;

Line 11: type_specifier : INT

int

Line 11: declaration_list : ID

s

Line 11: var_declaration : type_specifier declaration_list SEMICOLON

int s;

Line 11: statement : var_declaration

int s;

Line 11: statements : statements statement

int w;
w=x+y+z;
int s;

Line 12: variable : ID

s

Line 12: variable : ID

w

Line 12: factor : variable

w

Line 12: unary_expression : factor

w

Line 12: term : unary_expression

w

Line 12: simple_expression : term

w

Line 12: rel_expression : simple_expression

w

Line 12: logic_expression : rel_expression

w

Line 12: expression : variable ASSIGNOP logic_expression

s=w

Line 12: expression_statement : expression SEMICOLON

s=w;

Line 12: statement : expression_statement

s=w;

Line 12: statements : statements statement

int w;
w=x+y+z;
int s;
s=w;

Line 13: variable : ID

w

Line 13: factor : variable

w

Line 13: unary_expression : factor

w

Line 13: term : unary_expression

w

Line 13: simple_expression : term

w

Line 13: rel_expression : simple_expression

w

Line 13: logic_expression : rel_expression

w

Line 13: expression : logic_expression

w

Line 13: statement : RETURN expression SEMICOLON

return w;

Line 13: statements : statements statement

int w;
w=x+y+z;
int s;
s=w;
return w;

Line 14: compound_statement : LCURL statements RCURL

{
int w;
w=x+y+z;
int s;
s=w;
return w;
}

ScopeTable # 1.2
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 25 --> < s , ID > 
 29 --> < w , ID > 

ScopeTable # 1
 1 --> < y , ID > 
 2 --> < z , ID > 
 8 --> < func , ID > 
 10 --> < helper , ID > 

Line 14: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func(int x,int y,int z){
int w;
w=x+y+z;
int s;
s=w;
return w;
}

Line 14: unit : func_definition

int func(int x,int y,int z){
int w;
w=x+y+z;
int s;
s=w;
return w;
}

Line 14: program : program unit

int z[10];
float y;
int helper(int a,int b){
return a+b;
}
int func(int x,int y,int z){
int w;
w=x+y+z;
int s;
s=w;
return w;
}

Line 16: type_specifier : INT

int

Line 17: type_specifier : INT

int

Line 17: declaration_list : ID

z

Line 17: var_declaration : type_specifier declaration_list SEMICOLON

int z;

Line 17: statement : var_declaration

int z;

Line 17: statements : statement

int z;

Line 18: factor : CONST_INT

0

Line 18: unary_expression : factor

0

Line 18: term : unary_expression

0

Line 18: simple_expression : term

0

Line 18: rel_expression : simple_expression

0

Line 18: logic_expression : rel_expression

0

Line 18: expression : logic_expression

0

Line 18: statement : RETURN expression SEMICOLON

return 0;

Line 18: statements : statements statement

int z;
return 0;

Line 19: compound_statement : LCURL statements RCURL

{
int z;
return 0;
}

ScopeTable # 1.3
 2 --> < z , ID > 

ScopeTable # 1
 1 --> < y , ID > < main , ID > 
 2 --> < z , ID > 
 8 --> < func , ID > 
 10 --> < helper , ID > 

Line 19: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int z;
return 0;
}

Line 19: unit : func_definition

int main(){
int z;
return 0;
}

Line 19: program : program unit

int z[10];
float y;
int helper(int a,int b){
return a+b;
}
int func(int x,int y,int z){
int w;
w=x+y+z;
int s;
s=w;
return w;
}
int main(){
int z;
return 0;
}

Line 19: start : program

ScopeTable # 1
 1 --> < y , ID > < main , ID > 
 2 --> < z , ID > 
 8 --> < func , ID > 
 10 --> < helper , ID > 

Total lines: 19
Total errors: 0
